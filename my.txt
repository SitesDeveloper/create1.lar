Шаг 1 — Создание структуры директорий
1) sudo mkdir -p /var/www/create1.lar/proj1/

Шаг 2 — Предоставление разрешений
sudo chown -R $USER:$USER /var/www/create1.lar/proj1/
	-- $USER будет принимать значение текущего пользователя
sudo chmod -R 755 /var/www	
sudo chmod -R 755 /var/www/create1.lar


Шаг 3 — Создание демонстрационных страниц для каждого виртуального хоста
nano /var/www/create1.lar/proj1/index.html
	<html>
	  <head>
		<title>Welcome to create1.lar!</title>
	  </head>
	  <body> <h1>Success! The create1.lar virtual host is working!</h1>
	  </body>
	</html>
	
Шаг 4 — Создание новых файлов виртуального хоста
sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/create1.lar.conf	
sudo nano /etc/apache2/sites-available/create1.lar.conf

<VirtualHost *:80>
    ServerAdmin admin@create1.lar
    ServerName create1.lar
    ServerAlias www.create1.lar
    DocumentRoot /var/www/create1.lar
	<Directory /var/www/create1.lar/>
        Options -Indexes +FollowSymLinks
        AllowOverride All
    </Directory>	
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>


Шаг 5 — Активация новых файлов виртуального хоста
sudo a2ensite create1.lar.conf
sudo a2dissite 000-default.conf

sudo service apache2 reload
sudo service apache2 restart


Шаг 6 — Настройка локального файла hosts (необязательно)
sudo nano /etc/hosts

надо добавить  ::1 - без этого ошибка

127.0.0.1 create1.lar	www.create1.lar
::1 create1.lar	www.create1.lar

также это надо добавить в файл видны host

TODO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

для файлов после установки лары

find . -type f -exec chmod 644 {} +
find storage/ -type f -exec chmod 755 {} +


//решает проблему с доступом к log-файлам
sudo chown -R $USER:www-data storage
sudo chown -R $USER:www-data bootstrap/cache
и сразу после:
chmod -R 775 storage
chmod -R 775 bootstrap/cache

возможно надо: php artisan storage:link

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
НАСТРОЙКА Git 
git status - сначала error потому что нету
git init
git config core.filemode false 
- отключить отслеживание доступа к файлам +-x 644/755	

git add .
git commit -m "first commit"
//эти три команды только один раз, после этого можно просто  git push
git branch -M main
git remote add origin https://github.com/SitesDeveloper/create1.lar.git
git push -u origin main


теперь избавиться от vite  в laravel-mix
https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-vite-to-laravel-mix

git add .
git commit -m "after remove vite"
git push


1. MVC паттерн, model, view, controller
2. Первый route в laravel(маршрут)
3. Первый controller в laravel
4. Первая model + миграция в laravel
  php artisan make:model TestModel -m
  php artisan migrate
  php artisan migrate:rollback
5. Модель в Laravel. Общий обзор  
6. Модель. Метод чтения данных из базы (READ)
7. Модель. Реализация методов у модели
8. Модель. Методы чтения данных 2 (read/retrieve)
9. Модель. Метод добавления данных в базу(create)
10. Модель. Методы обновления данных(update)
11. Модель. Метод удаления данных(delete) и soft delete
12. Модель. Комбинированные методы создания и обновления данных
    //firstOrCreate
    //updateOrCreate
13. Миграции. Редактирование миграций    
    php artisan make:migration add_column_description_to_posts_table
    php artisan migrate
    php artisan make:migration delete_column_description_to_posts_table
    php artisan migrate   //проверка
    php artisan migrate:rollback
    php artisan migrate
    php artisan make:migration edit_column_content_to_posts_table

    #setup doctrine/dbal  for rename columns  
    composer require doctrine/dbal    
    php artisan migrate
    php artisan make:migration change_column_post_content_to_string_to_posts_table
    php artisan migrate
    php artisan make:migration drop_table_posts
    php artisan migrate
14. View 
15. View часть 2
16. Bootstrap в laravel 
    #подключение bootstrap      
    composer require laravel/ui
    php artisan ui bootstrap
    npm install && npm run dev
    #npm run watch  

17. CRUD через интерфейс. Имена роутов, контроллеров по конвенции Laravel
18. Отношения один ко многим
  php artisan make:model Category -m
  #change migration name (category first before post)
19. Отношения многие ко многим  
  php artisan make:model Tag -m
  php artisan make:model PostTag -m
  php artisan migrate
20. CRUD через интерфейс - модифицируем интерфейс  
21. CRUD через интерфейс - модифицируем интерфейс часть 2 (attach)
22. CRUD через интерфейс - модифицируем интерфейс часть 3 (sync)
23. CRUD через интерфейс - модифицируем интерфейс часть 4 (show errors)
24. Отношения один ко многим и многие ко многим через конвенцию Laravel 
25. Однометодные контроллеры
26. Класс Request в Laravel
27. Класс Service в Laravel
28. Классы Factory и Seed в Laravel
  php artisan migrate --seed
  php artisan make:factory PostFactory -m=Post
  php artisan make:factory CategoryFactory
  php artisan make:factory TagFactory
  php artisan migrate --fresh --seed

29. Пагинация в Laravel